pub use conduit::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod conduit {
    pub use super::super::shared_types::*;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"BadReturnValueFromERC20OnTransfer\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\",\"components\":[]}],\"type\":\"error\",\"name\":\"ChannelClosed\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\",\"components\":[]}],\"type\":\"error\",\"name\":\"ChannelStatusAlreadySet\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"identifiers\",\"type\":\"uint256[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\",\"components\":[]}],\"type\":\"error\",\"name\":\"ERC1155BatchTransferGenericFailure\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Invalid1155BatchTransferEncoding\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidController\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidERC721TransferAmount\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidItemType\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"MissingItemAmount\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"type\":\"error\",\"name\":\"NoContract\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"TokenTransferGenericFailure\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"UnusedItemParameters\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ChannelUpdated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"struct ConduitTransfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"enum ConduitItemType\",\"name\":\"itemType\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"struct ConduitBatch1155Transfer[]\",\"name\":\"batchTransfers\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\",\"components\":[]}]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"executeBatch1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"struct ConduitTransfer[]\",\"name\":\"standardTransfers\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"enum ConduitItemType\",\"name\":\"itemType\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}]},{\"internalType\":\"struct ConduitBatch1155Transfer[]\",\"name\":\"batchTransfers\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\",\"components\":[]}]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"executeWithBatch1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateChannel\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static CONDUIT_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        160,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        51,
        96,
        128,
        82,
        96,
        128,
        81,
        97,
        10,
        179,
        97,
        0,
        48,
        96,
        0,
        57,
        96,
        0,
        97,
        1,
        233,
        1,
        82,
        97,
        10,
        179,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        76,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        76,
        227,
        74,
        162,
        20,
        97,
        0,
        81,
        87,
        128,
        99,
        137,
        158,
        16,
        76,
        20,
        97,
        0,
        129,
        87,
        128,
        99,
        141,
        242,
        93,
        146,
        20,
        97,
        0,
        148,
        87,
        128,
        99,
        196,
        232,
        252,
        181,
        20,
        97,
        0,
        167,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        100,
        97,
        0,
        95,
        54,
        96,
        4,
        97,
        8,
        141,
        86,
        91,
        97,
        0,
        188,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        100,
        97,
        0,
        143,
        54,
        96,
        4,
        97,
        9,
        20,
        86,
        91,
        97,
        1,
        43,
        86,
        91,
        97,
        0,
        100,
        97,
        0,
        162,
        54,
        96,
        4,
        97,
        9,
        128,
        86,
        91,
        97,
        1,
        155,
        86,
        91,
        97,
        0,
        186,
        97,
        0,
        181,
        54,
        96,
        4,
        97,
        9,
        210,
        86,
        91,
        97,
        1,
        222,
        86,
        91,
        0,
        91,
        96,
        0,
        51,
        96,
        0,
        82,
        96,
        0,
        96,
        32,
        82,
        96,
        64,
        96,
        0,
        32,
        84,
        97,
        0,
        230,
        87,
        99,
        73,
        237,
        86,
        249,
        96,
        225,
        27,
        96,
        0,
        82,
        51,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        129,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        1,
        26,
        87,
        97,
        1,
        18,
        133,
        133,
        131,
        129,
        129,
        16,
        97,
        1,
        7,
        87,
        97,
        1,
        7,
        97,
        10,
        14,
        86,
        91,
        144,
        80,
        96,
        192,
        2,
        1,
        97,
        2,
        220,
        86,
        91,
        96,
        1,
        1,
        97,
        0,
        234,
        86,
        91,
        80,
        99,
        38,
        113,
        165,
        81,
        96,
        225,
        27,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        51,
        96,
        0,
        82,
        96,
        0,
        96,
        32,
        82,
        96,
        64,
        96,
        0,
        32,
        84,
        97,
        1,
        85,
        87,
        99,
        73,
        237,
        86,
        249,
        96,
        225,
        27,
        96,
        0,
        82,
        51,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        131,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        1,
        126,
        87,
        97,
        1,
        118,
        135,
        135,
        131,
        129,
        129,
        16,
        97,
        1,
        7,
        87,
        97,
        1,
        7,
        97,
        10,
        14,
        86,
        91,
        96,
        1,
        1,
        97,
        1,
        89,
        86,
        91,
        80,
        97,
        1,
        137,
        132,
        132,
        97,
        4,
        72,
        86,
        91,
        80,
        99,
        34,
        103,
        132,
        19,
        96,
        226,
        27,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        51,
        96,
        0,
        82,
        96,
        0,
        96,
        32,
        82,
        96,
        64,
        96,
        0,
        32,
        84,
        97,
        1,
        197,
        87,
        99,
        73,
        237,
        86,
        249,
        96,
        225,
        27,
        96,
        0,
        82,
        51,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        97,
        1,
        207,
        131,
        131,
        97,
        4,
        72,
        86,
        91,
        80,
        99,
        70,
        249,
        46,
        201,
        96,
        225,
        27,
        146,
        145,
        80,
        80,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        2,
        39,
        87,
        96,
        64,
        81,
        99,
        54,
        171,
        180,
        223,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        21,
        21,
        96,
        255,
        144,
        145,
        22,
        21,
        21,
        3,
        97,
        2,
        127,
        87,
        96,
        64,
        81,
        99,
        73,
        39,
        26,
        15,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        96,
        4,
        130,
        1,
        82,
        129,
        21,
        21,
        96,
        36,
        130,
        1,
        82,
        96,
        68,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        145,
        130,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        133,
        21,
        21,
        144,
        129,
        23,
        144,
        145,
        85,
        145,
        81,
        145,
        130,
        82,
        127,
        174,
        99,
        6,
        125,
        67,
        172,
        7,
        86,
        59,
        126,
        184,
        219,
        101,
        149,
        99,
        95,
        199,
        127,
        21,
        120,
        162,
        165,
        234,
        6,
        186,
        145,
        182,
        62,
        42,
        250,
        55,
        226,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        80,
        80,
        86,
        91,
        96,
        1,
        97,
        2,
        235,
        96,
        32,
        131,
        1,
        131,
        97,
        10,
        58,
        86,
        91,
        96,
        3,
        129,
        17,
        21,
        97,
        2,
        252,
        87,
        97,
        2,
        252,
        97,
        10,
        36,
        86,
        91,
        3,
        97,
        3,
        65,
        87,
        97,
        3,
        62,
        97,
        3,
        20,
        96,
        64,
        131,
        1,
        96,
        32,
        132,
        1,
        97,
        10,
        98,
        86,
        91,
        97,
        3,
        36,
        96,
        96,
        132,
        1,
        96,
        64,
        133,
        1,
        97,
        10,
        98,
        86,
        91,
        97,
        3,
        52,
        96,
        128,
        133,
        1,
        96,
        96,
        134,
        1,
        97,
        10,
        98,
        86,
        91,
        132,
        96,
        160,
        1,
        53,
        97,
        5,
        141,
        86,
        91,
        80,
        86,
        91,
        96,
        2,
        97,
        3,
        80,
        96,
        32,
        131,
        1,
        131,
        97,
        10,
        58,
        86,
        91,
        96,
        3,
        129,
        17,
        21,
        97,
        3,
        97,
        87,
        97,
        3,
        97,
        97,
        10,
        36,
        86,
        91,
        3,
        97,
        3,
        200,
        87,
        128,
        96,
        160,
        1,
        53,
        96,
        1,
        20,
        97,
        3,
        139,
        87,
        96,
        64,
        81,
        99,
        239,
        204,
        0,
        177,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        62,
        97,
        3,
        158,
        96,
        64,
        131,
        1,
        96,
        32,
        132,
        1,
        97,
        10,
        98,
        86,
        91,
        97,
        3,
        174,
        96,
        96,
        132,
        1,
        96,
        64,
        133,
        1,
        97,
        10,
        98,
        86,
        91,
        97,
        3,
        190,
        96,
        128,
        133,
        1,
        96,
        96,
        134,
        1,
        97,
        10,
        98,
        86,
        91,
        132,
        96,
        128,
        1,
        53,
        97,
        6,
        150,
        86,
        91,
        96,
        3,
        97,
        3,
        215,
        96,
        32,
        131,
        1,
        131,
        97,
        10,
        58,
        86,
        91,
        96,
        3,
        129,
        17,
        21,
        97,
        3,
        232,
        87,
        97,
        3,
        232,
        97,
        10,
        36,
        86,
        91,
        3,
        97,
        4,
        47,
        87,
        97,
        3,
        62,
        97,
        4,
        0,
        96,
        64,
        131,
        1,
        96,
        32,
        132,
        1,
        97,
        10,
        98,
        86,
        91,
        97,
        4,
        16,
        96,
        96,
        132,
        1,
        96,
        64,
        133,
        1,
        97,
        10,
        98,
        86,
        91,
        97,
        4,
        32,
        96,
        128,
        133,
        1,
        96,
        96,
        134,
        1,
        97,
        10,
        98,
        86,
        91,
        132,
        96,
        128,
        1,
        53,
        133,
        96,
        160,
        1,
        53,
        97,
        7,
        90,
        86,
        91,
        96,
        64,
        81,
        99,
        30,
        76,
        188,
        127,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        128,
        130,
        128,
        99,
        23,
        89,
        97,
        107,
        96,
        225,
        27,
        96,
        32,
        82,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        5,
        128,
        87,
        130,
        53,
        130,
        1,
        128,
        53,
        128,
        59,
        97,
        4,
        130,
        87,
        99,
        47,
        138,
        235,
        57,
        96,
        225,
        27,
        96,
        0,
        82,
        128,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        160,
        130,
        1,
        53,
        96,
        32,
        129,
        2,
        96,
        192,
        1,
        128,
        96,
        128,
        133,
        1,
        53,
        20,
        96,
        160,
        96,
        96,
        134,
        1,
        53,
        20,
        22,
        129,
        133,
        1,
        53,
        131,
        20,
        22,
        21,
        144,
        80,
        128,
        21,
        97,
        4,
        191,
        87,
        99,
        58,
        232,
        130,
        19,
        96,
        226,
        27,
        96,
        0,
        82,
        96,
        4,
        96,
        0,
        253,
        91,
        80,
        96,
        32,
        134,
        1,
        149,
        80,
        96,
        128,
        96,
        32,
        132,
        1,
        96,
        36,
        55,
        96,
        64,
        129,
        2,
        96,
        64,
        1,
        144,
        80,
        128,
        96,
        160,
        1,
        96,
        164,
        82,
        96,
        0,
        129,
        96,
        196,
        1,
        82,
        128,
        96,
        196,
        1,
        129,
        96,
        160,
        133,
        1,
        96,
        196,
        55,
        96,
        0,
        128,
        130,
        96,
        32,
        96,
        0,
        135,
        90,
        241,
        147,
        80,
        131,
        97,
        5,
        113,
        87,
        61,
        21,
        97,
        5,
        79,
        87,
        96,
        32,
        96,
        31,
        61,
        1,
        4,
        145,
        80,
        96,
        32,
        129,
        4,
        130,
        96,
        3,
        2,
        129,
        132,
        17,
        21,
        97,
        5,
        55,
        87,
        129,
        132,
        3,
        96,
        3,
        2,
        97,
        2,
        0,
        131,
        128,
        2,
        134,
        128,
        2,
        3,
        4,
        1,
        1,
        91,
        90,
        96,
        32,
        130,
        1,
        16,
        21,
        97,
        5,
        76,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        91,
        99,
        87,
        226,
        34,
        241,
        96,
        225,
        27,
        96,
        0,
        82,
        130,
        96,
        4,
        82,
        96,
        192,
        96,
        100,
        82,
        96,
        132,
        81,
        96,
        32,
        1,
        96,
        132,
        82,
        128,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        1,
        129,
        1,
        144,
        80,
        97,
        4,
        89,
        86,
        91,
        80,
        80,
        80,
        80,
        96,
        128,
        96,
        64,
        82,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        96,
        0,
        82,
        131,
        96,
        4,
        82,
        130,
        96,
        36,
        82,
        129,
        96,
        68,
        82,
        96,
        32,
        96,
        0,
        96,
        100,
        96,
        0,
        128,
        137,
        90,
        241,
        128,
        61,
        21,
        96,
        31,
        61,
        17,
        96,
        1,
        96,
        0,
        81,
        20,
        22,
        23,
        22,
        61,
        21,
        21,
        129,
        22,
        97,
        6,
        134,
        87,
        128,
        135,
        59,
        21,
        21,
        22,
        97,
        6,
        134,
        87,
        128,
        97,
        6,
        113,
        87,
        129,
        97,
        6,
        80,
        87,
        61,
        21,
        97,
        6,
        42,
        87,
        96,
        32,
        96,
        31,
        61,
        1,
        4,
        96,
        32,
        132,
        4,
        129,
        96,
        3,
        2,
        129,
        131,
        17,
        21,
        97,
        6,
        17,
        87,
        129,
        131,
        3,
        96,
        3,
        2,
        97,
        2,
        0,
        131,
        128,
        2,
        133,
        128,
        2,
        3,
        4,
        1,
        1,
        91,
        90,
        96,
        32,
        130,
        1,
        16,
        21,
        97,
        6,
        38,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        91,
        99,
        244,
        134,
        188,
        135,
        96,
        224,
        27,
        96,
        0,
        82,
        134,
        96,
        4,
        82,
        133,
        96,
        36,
        82,
        132,
        96,
        68,
        82,
        96,
        0,
        96,
        100,
        82,
        131,
        96,
        132,
        82,
        96,
        164,
        96,
        0,
        253,
        91,
        99,
        152,
        137,
        25,
        35,
        96,
        224,
        27,
        96,
        0,
        82,
        134,
        96,
        4,
        82,
        133,
        96,
        36,
        82,
        132,
        96,
        68,
        82,
        131,
        96,
        100,
        82,
        96,
        132,
        96,
        0,
        253,
        91,
        99,
        47,
        138,
        235,
        57,
        96,
        225,
        27,
        96,
        0,
        82,
        134,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        80,
        96,
        64,
        82,
        80,
        80,
        96,
        0,
        96,
        96,
        82,
        80,
        80,
        86,
        91,
        131,
        59,
        97,
        6,
        177,
        87,
        99,
        47,
        138,
        235,
        57,
        96,
        225,
        27,
        96,
        0,
        82,
        131,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        96,
        0,
        82,
        131,
        96,
        4,
        82,
        130,
        96,
        36,
        82,
        129,
        96,
        68,
        82,
        96,
        0,
        128,
        96,
        100,
        96,
        0,
        128,
        137,
        90,
        241,
        128,
        97,
        7,
        75,
        87,
        61,
        21,
        97,
        7,
        37,
        87,
        96,
        32,
        96,
        31,
        61,
        1,
        4,
        96,
        32,
        131,
        4,
        129,
        96,
        3,
        2,
        129,
        131,
        17,
        21,
        97,
        7,
        12,
        87,
        129,
        131,
        3,
        96,
        3,
        2,
        97,
        2,
        0,
        131,
        128,
        2,
        133,
        128,
        2,
        3,
        4,
        1,
        1,
        91,
        90,
        96,
        32,
        130,
        1,
        16,
        21,
        97,
        7,
        33,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        91,
        99,
        244,
        134,
        188,
        135,
        96,
        224,
        27,
        96,
        0,
        82,
        133,
        96,
        4,
        82,
        132,
        96,
        36,
        82,
        131,
        96,
        68,
        82,
        130,
        96,
        100,
        82,
        96,
        1,
        96,
        132,
        82,
        96,
        164,
        96,
        0,
        253,
        91,
        80,
        96,
        64,
        82,
        80,
        80,
        96,
        0,
        96,
        96,
        82,
        80,
        80,
        86,
        91,
        132,
        59,
        97,
        7,
        117,
        87,
        99,
        47,
        138,
        235,
        57,
        96,
        225,
        27,
        96,
        0,
        82,
        132,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        96,
        128,
        81,
        96,
        160,
        81,
        96,
        192,
        81,
        99,
        121,
        33,
        33,
        149,
        96,
        225,
        27,
        96,
        0,
        82,
        135,
        96,
        4,
        82,
        134,
        96,
        36,
        82,
        133,
        96,
        68,
        82,
        132,
        96,
        100,
        82,
        96,
        160,
        96,
        132,
        82,
        96,
        0,
        96,
        164,
        82,
        96,
        0,
        128,
        96,
        196,
        96,
        0,
        128,
        141,
        90,
        241,
        128,
        97,
        8,
        37,
        87,
        61,
        21,
        97,
        8,
        0,
        87,
        96,
        32,
        96,
        31,
        61,
        1,
        4,
        96,
        32,
        134,
        4,
        129,
        96,
        3,
        2,
        129,
        131,
        17,
        21,
        97,
        7,
        231,
        87,
        129,
        131,
        3,
        96,
        3,
        2,
        97,
        2,
        0,
        131,
        128,
        2,
        133,
        128,
        2,
        3,
        4,
        1,
        1,
        91,
        90,
        96,
        32,
        130,
        1,
        16,
        21,
        97,
        7,
        252,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        91,
        99,
        244,
        134,
        188,
        135,
        96,
        224,
        27,
        96,
        0,
        82,
        137,
        96,
        4,
        82,
        136,
        96,
        36,
        82,
        135,
        96,
        68,
        82,
        134,
        96,
        100,
        82,
        133,
        96,
        132,
        82,
        96,
        164,
        96,
        0,
        253,
        91,
        80,
        96,
        128,
        146,
        144,
        146,
        82,
        96,
        160,
        82,
        96,
        192,
        82,
        96,
        64,
        82,
        80,
        80,
        96,
        0,
        96,
        96,
        82,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        8,
        83,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        8,
        107,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        96,
        192,
        131,
        2,
        133,
        1,
        1,
        17,
        21,
        97,
        8,
        134,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        8,
        160,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        8,
        183,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        8,
        195,
        133,
        130,
        134,
        1,
        97,
        8,
        65,
        86,
        91,
        144,
        150,
        144,
        149,
        80,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        8,
        225,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        8,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        96,
        5,
        27,
        133,
        1,
        1,
        17,
        21,
        97,
        8,
        134,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        9,
        42,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        9,
        66,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        9,
        78,
        136,
        131,
        137,
        1,
        97,
        8,
        65,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        9,
        103,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        9,
        116,
        135,
        130,
        136,
        1,
        97,
        8,
        207,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        9,
        147,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        9,
        170,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        8,
        195,
        133,
        130,
        134,
        1,
        97,
        8,
        207,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        9,
        205,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        9,
        229,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        9,
        238,
        131,
        97,
        9,
        182,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        128,
        21,
        21,
        129,
        20,
        97,
        10,
        3,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        76,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        4,
        129,
        16,
        97,
        10,
        91,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        116,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        10,
        91,
        130,
        97,
        9,
        182,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        134,
        239,
        233,
        47,
        71,
        141,
        97,
        223,
        11,
        216,
        215,
        10,
        62,
        66,
        127,
        189,
        51,
        82,
        106,
        89,
        13,
        165,
        94,
        99,
        125,
        248,
        244,
        159,
        244,
        60,
        104,
        41,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static CONDUIT_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        76,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        76,
        227,
        74,
        162,
        20,
        97,
        0,
        81,
        87,
        128,
        99,
        137,
        158,
        16,
        76,
        20,
        97,
        0,
        129,
        87,
        128,
        99,
        141,
        242,
        93,
        146,
        20,
        97,
        0,
        148,
        87,
        128,
        99,
        196,
        232,
        252,
        181,
        20,
        97,
        0,
        167,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        100,
        97,
        0,
        95,
        54,
        96,
        4,
        97,
        8,
        141,
        86,
        91,
        97,
        0,
        188,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        100,
        97,
        0,
        143,
        54,
        96,
        4,
        97,
        9,
        20,
        86,
        91,
        97,
        1,
        43,
        86,
        91,
        97,
        0,
        100,
        97,
        0,
        162,
        54,
        96,
        4,
        97,
        9,
        128,
        86,
        91,
        97,
        1,
        155,
        86,
        91,
        97,
        0,
        186,
        97,
        0,
        181,
        54,
        96,
        4,
        97,
        9,
        210,
        86,
        91,
        97,
        1,
        222,
        86,
        91,
        0,
        91,
        96,
        0,
        51,
        96,
        0,
        82,
        96,
        0,
        96,
        32,
        82,
        96,
        64,
        96,
        0,
        32,
        84,
        97,
        0,
        230,
        87,
        99,
        73,
        237,
        86,
        249,
        96,
        225,
        27,
        96,
        0,
        82,
        51,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        129,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        1,
        26,
        87,
        97,
        1,
        18,
        133,
        133,
        131,
        129,
        129,
        16,
        97,
        1,
        7,
        87,
        97,
        1,
        7,
        97,
        10,
        14,
        86,
        91,
        144,
        80,
        96,
        192,
        2,
        1,
        97,
        2,
        220,
        86,
        91,
        96,
        1,
        1,
        97,
        0,
        234,
        86,
        91,
        80,
        99,
        38,
        113,
        165,
        81,
        96,
        225,
        27,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        51,
        96,
        0,
        82,
        96,
        0,
        96,
        32,
        82,
        96,
        64,
        96,
        0,
        32,
        84,
        97,
        1,
        85,
        87,
        99,
        73,
        237,
        86,
        249,
        96,
        225,
        27,
        96,
        0,
        82,
        51,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        131,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        1,
        126,
        87,
        97,
        1,
        118,
        135,
        135,
        131,
        129,
        129,
        16,
        97,
        1,
        7,
        87,
        97,
        1,
        7,
        97,
        10,
        14,
        86,
        91,
        96,
        1,
        1,
        97,
        1,
        89,
        86,
        91,
        80,
        97,
        1,
        137,
        132,
        132,
        97,
        4,
        72,
        86,
        91,
        80,
        99,
        34,
        103,
        132,
        19,
        96,
        226,
        27,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        51,
        96,
        0,
        82,
        96,
        0,
        96,
        32,
        82,
        96,
        64,
        96,
        0,
        32,
        84,
        97,
        1,
        197,
        87,
        99,
        73,
        237,
        86,
        249,
        96,
        225,
        27,
        96,
        0,
        82,
        51,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        97,
        1,
        207,
        131,
        131,
        97,
        4,
        72,
        86,
        91,
        80,
        99,
        70,
        249,
        46,
        201,
        96,
        225,
        27,
        146,
        145,
        80,
        80,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        2,
        39,
        87,
        96,
        64,
        81,
        99,
        54,
        171,
        180,
        223,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        21,
        21,
        96,
        255,
        144,
        145,
        22,
        21,
        21,
        3,
        97,
        2,
        127,
        87,
        96,
        64,
        81,
        99,
        73,
        39,
        26,
        15,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        96,
        4,
        130,
        1,
        82,
        129,
        21,
        21,
        96,
        36,
        130,
        1,
        82,
        96,
        68,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        145,
        130,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        133,
        21,
        21,
        144,
        129,
        23,
        144,
        145,
        85,
        145,
        81,
        145,
        130,
        82,
        127,
        174,
        99,
        6,
        125,
        67,
        172,
        7,
        86,
        59,
        126,
        184,
        219,
        101,
        149,
        99,
        95,
        199,
        127,
        21,
        120,
        162,
        165,
        234,
        6,
        186,
        145,
        182,
        62,
        42,
        250,
        55,
        226,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        80,
        80,
        86,
        91,
        96,
        1,
        97,
        2,
        235,
        96,
        32,
        131,
        1,
        131,
        97,
        10,
        58,
        86,
        91,
        96,
        3,
        129,
        17,
        21,
        97,
        2,
        252,
        87,
        97,
        2,
        252,
        97,
        10,
        36,
        86,
        91,
        3,
        97,
        3,
        65,
        87,
        97,
        3,
        62,
        97,
        3,
        20,
        96,
        64,
        131,
        1,
        96,
        32,
        132,
        1,
        97,
        10,
        98,
        86,
        91,
        97,
        3,
        36,
        96,
        96,
        132,
        1,
        96,
        64,
        133,
        1,
        97,
        10,
        98,
        86,
        91,
        97,
        3,
        52,
        96,
        128,
        133,
        1,
        96,
        96,
        134,
        1,
        97,
        10,
        98,
        86,
        91,
        132,
        96,
        160,
        1,
        53,
        97,
        5,
        141,
        86,
        91,
        80,
        86,
        91,
        96,
        2,
        97,
        3,
        80,
        96,
        32,
        131,
        1,
        131,
        97,
        10,
        58,
        86,
        91,
        96,
        3,
        129,
        17,
        21,
        97,
        3,
        97,
        87,
        97,
        3,
        97,
        97,
        10,
        36,
        86,
        91,
        3,
        97,
        3,
        200,
        87,
        128,
        96,
        160,
        1,
        53,
        96,
        1,
        20,
        97,
        3,
        139,
        87,
        96,
        64,
        81,
        99,
        239,
        204,
        0,
        177,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        62,
        97,
        3,
        158,
        96,
        64,
        131,
        1,
        96,
        32,
        132,
        1,
        97,
        10,
        98,
        86,
        91,
        97,
        3,
        174,
        96,
        96,
        132,
        1,
        96,
        64,
        133,
        1,
        97,
        10,
        98,
        86,
        91,
        97,
        3,
        190,
        96,
        128,
        133,
        1,
        96,
        96,
        134,
        1,
        97,
        10,
        98,
        86,
        91,
        132,
        96,
        128,
        1,
        53,
        97,
        6,
        150,
        86,
        91,
        96,
        3,
        97,
        3,
        215,
        96,
        32,
        131,
        1,
        131,
        97,
        10,
        58,
        86,
        91,
        96,
        3,
        129,
        17,
        21,
        97,
        3,
        232,
        87,
        97,
        3,
        232,
        97,
        10,
        36,
        86,
        91,
        3,
        97,
        4,
        47,
        87,
        97,
        3,
        62,
        97,
        4,
        0,
        96,
        64,
        131,
        1,
        96,
        32,
        132,
        1,
        97,
        10,
        98,
        86,
        91,
        97,
        4,
        16,
        96,
        96,
        132,
        1,
        96,
        64,
        133,
        1,
        97,
        10,
        98,
        86,
        91,
        97,
        4,
        32,
        96,
        128,
        133,
        1,
        96,
        96,
        134,
        1,
        97,
        10,
        98,
        86,
        91,
        132,
        96,
        128,
        1,
        53,
        133,
        96,
        160,
        1,
        53,
        97,
        7,
        90,
        86,
        91,
        96,
        64,
        81,
        99,
        30,
        76,
        188,
        127,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        128,
        130,
        128,
        99,
        23,
        89,
        97,
        107,
        96,
        225,
        27,
        96,
        32,
        82,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        5,
        128,
        87,
        130,
        53,
        130,
        1,
        128,
        53,
        128,
        59,
        97,
        4,
        130,
        87,
        99,
        47,
        138,
        235,
        57,
        96,
        225,
        27,
        96,
        0,
        82,
        128,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        160,
        130,
        1,
        53,
        96,
        32,
        129,
        2,
        96,
        192,
        1,
        128,
        96,
        128,
        133,
        1,
        53,
        20,
        96,
        160,
        96,
        96,
        134,
        1,
        53,
        20,
        22,
        129,
        133,
        1,
        53,
        131,
        20,
        22,
        21,
        144,
        80,
        128,
        21,
        97,
        4,
        191,
        87,
        99,
        58,
        232,
        130,
        19,
        96,
        226,
        27,
        96,
        0,
        82,
        96,
        4,
        96,
        0,
        253,
        91,
        80,
        96,
        32,
        134,
        1,
        149,
        80,
        96,
        128,
        96,
        32,
        132,
        1,
        96,
        36,
        55,
        96,
        64,
        129,
        2,
        96,
        64,
        1,
        144,
        80,
        128,
        96,
        160,
        1,
        96,
        164,
        82,
        96,
        0,
        129,
        96,
        196,
        1,
        82,
        128,
        96,
        196,
        1,
        129,
        96,
        160,
        133,
        1,
        96,
        196,
        55,
        96,
        0,
        128,
        130,
        96,
        32,
        96,
        0,
        135,
        90,
        241,
        147,
        80,
        131,
        97,
        5,
        113,
        87,
        61,
        21,
        97,
        5,
        79,
        87,
        96,
        32,
        96,
        31,
        61,
        1,
        4,
        145,
        80,
        96,
        32,
        129,
        4,
        130,
        96,
        3,
        2,
        129,
        132,
        17,
        21,
        97,
        5,
        55,
        87,
        129,
        132,
        3,
        96,
        3,
        2,
        97,
        2,
        0,
        131,
        128,
        2,
        134,
        128,
        2,
        3,
        4,
        1,
        1,
        91,
        90,
        96,
        32,
        130,
        1,
        16,
        21,
        97,
        5,
        76,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        91,
        99,
        87,
        226,
        34,
        241,
        96,
        225,
        27,
        96,
        0,
        82,
        130,
        96,
        4,
        82,
        96,
        192,
        96,
        100,
        82,
        96,
        132,
        81,
        96,
        32,
        1,
        96,
        132,
        82,
        128,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        1,
        129,
        1,
        144,
        80,
        97,
        4,
        89,
        86,
        91,
        80,
        80,
        80,
        80,
        96,
        128,
        96,
        64,
        82,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        96,
        0,
        82,
        131,
        96,
        4,
        82,
        130,
        96,
        36,
        82,
        129,
        96,
        68,
        82,
        96,
        32,
        96,
        0,
        96,
        100,
        96,
        0,
        128,
        137,
        90,
        241,
        128,
        61,
        21,
        96,
        31,
        61,
        17,
        96,
        1,
        96,
        0,
        81,
        20,
        22,
        23,
        22,
        61,
        21,
        21,
        129,
        22,
        97,
        6,
        134,
        87,
        128,
        135,
        59,
        21,
        21,
        22,
        97,
        6,
        134,
        87,
        128,
        97,
        6,
        113,
        87,
        129,
        97,
        6,
        80,
        87,
        61,
        21,
        97,
        6,
        42,
        87,
        96,
        32,
        96,
        31,
        61,
        1,
        4,
        96,
        32,
        132,
        4,
        129,
        96,
        3,
        2,
        129,
        131,
        17,
        21,
        97,
        6,
        17,
        87,
        129,
        131,
        3,
        96,
        3,
        2,
        97,
        2,
        0,
        131,
        128,
        2,
        133,
        128,
        2,
        3,
        4,
        1,
        1,
        91,
        90,
        96,
        32,
        130,
        1,
        16,
        21,
        97,
        6,
        38,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        91,
        99,
        244,
        134,
        188,
        135,
        96,
        224,
        27,
        96,
        0,
        82,
        134,
        96,
        4,
        82,
        133,
        96,
        36,
        82,
        132,
        96,
        68,
        82,
        96,
        0,
        96,
        100,
        82,
        131,
        96,
        132,
        82,
        96,
        164,
        96,
        0,
        253,
        91,
        99,
        152,
        137,
        25,
        35,
        96,
        224,
        27,
        96,
        0,
        82,
        134,
        96,
        4,
        82,
        133,
        96,
        36,
        82,
        132,
        96,
        68,
        82,
        131,
        96,
        100,
        82,
        96,
        132,
        96,
        0,
        253,
        91,
        99,
        47,
        138,
        235,
        57,
        96,
        225,
        27,
        96,
        0,
        82,
        134,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        80,
        96,
        64,
        82,
        80,
        80,
        96,
        0,
        96,
        96,
        82,
        80,
        80,
        86,
        91,
        131,
        59,
        97,
        6,
        177,
        87,
        99,
        47,
        138,
        235,
        57,
        96,
        225,
        27,
        96,
        0,
        82,
        131,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        96,
        0,
        82,
        131,
        96,
        4,
        82,
        130,
        96,
        36,
        82,
        129,
        96,
        68,
        82,
        96,
        0,
        128,
        96,
        100,
        96,
        0,
        128,
        137,
        90,
        241,
        128,
        97,
        7,
        75,
        87,
        61,
        21,
        97,
        7,
        37,
        87,
        96,
        32,
        96,
        31,
        61,
        1,
        4,
        96,
        32,
        131,
        4,
        129,
        96,
        3,
        2,
        129,
        131,
        17,
        21,
        97,
        7,
        12,
        87,
        129,
        131,
        3,
        96,
        3,
        2,
        97,
        2,
        0,
        131,
        128,
        2,
        133,
        128,
        2,
        3,
        4,
        1,
        1,
        91,
        90,
        96,
        32,
        130,
        1,
        16,
        21,
        97,
        7,
        33,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        91,
        99,
        244,
        134,
        188,
        135,
        96,
        224,
        27,
        96,
        0,
        82,
        133,
        96,
        4,
        82,
        132,
        96,
        36,
        82,
        131,
        96,
        68,
        82,
        130,
        96,
        100,
        82,
        96,
        1,
        96,
        132,
        82,
        96,
        164,
        96,
        0,
        253,
        91,
        80,
        96,
        64,
        82,
        80,
        80,
        96,
        0,
        96,
        96,
        82,
        80,
        80,
        86,
        91,
        132,
        59,
        97,
        7,
        117,
        87,
        99,
        47,
        138,
        235,
        57,
        96,
        225,
        27,
        96,
        0,
        82,
        132,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        96,
        128,
        81,
        96,
        160,
        81,
        96,
        192,
        81,
        99,
        121,
        33,
        33,
        149,
        96,
        225,
        27,
        96,
        0,
        82,
        135,
        96,
        4,
        82,
        134,
        96,
        36,
        82,
        133,
        96,
        68,
        82,
        132,
        96,
        100,
        82,
        96,
        160,
        96,
        132,
        82,
        96,
        0,
        96,
        164,
        82,
        96,
        0,
        128,
        96,
        196,
        96,
        0,
        128,
        141,
        90,
        241,
        128,
        97,
        8,
        37,
        87,
        61,
        21,
        97,
        8,
        0,
        87,
        96,
        32,
        96,
        31,
        61,
        1,
        4,
        96,
        32,
        134,
        4,
        129,
        96,
        3,
        2,
        129,
        131,
        17,
        21,
        97,
        7,
        231,
        87,
        129,
        131,
        3,
        96,
        3,
        2,
        97,
        2,
        0,
        131,
        128,
        2,
        133,
        128,
        2,
        3,
        4,
        1,
        1,
        91,
        90,
        96,
        32,
        130,
        1,
        16,
        21,
        97,
        7,
        252,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        91,
        99,
        244,
        134,
        188,
        135,
        96,
        224,
        27,
        96,
        0,
        82,
        137,
        96,
        4,
        82,
        136,
        96,
        36,
        82,
        135,
        96,
        68,
        82,
        134,
        96,
        100,
        82,
        133,
        96,
        132,
        82,
        96,
        164,
        96,
        0,
        253,
        91,
        80,
        96,
        128,
        146,
        144,
        146,
        82,
        96,
        160,
        82,
        96,
        192,
        82,
        96,
        64,
        82,
        80,
        80,
        96,
        0,
        96,
        96,
        82,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        8,
        83,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        8,
        107,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        96,
        192,
        131,
        2,
        133,
        1,
        1,
        17,
        21,
        97,
        8,
        134,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        8,
        160,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        8,
        183,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        8,
        195,
        133,
        130,
        134,
        1,
        97,
        8,
        65,
        86,
        91,
        144,
        150,
        144,
        149,
        80,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        8,
        225,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        8,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        96,
        5,
        27,
        133,
        1,
        1,
        17,
        21,
        97,
        8,
        134,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        9,
        42,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        9,
        66,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        9,
        78,
        136,
        131,
        137,
        1,
        97,
        8,
        65,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        9,
        103,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        9,
        116,
        135,
        130,
        136,
        1,
        97,
        8,
        207,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        9,
        147,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        9,
        170,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        8,
        195,
        133,
        130,
        134,
        1,
        97,
        8,
        207,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        9,
        205,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        9,
        229,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        9,
        238,
        131,
        97,
        9,
        182,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        128,
        21,
        21,
        129,
        20,
        97,
        10,
        3,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        76,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        4,
        129,
        16,
        97,
        10,
        91,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        116,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        10,
        91,
        130,
        97,
        9,
        182,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        134,
        239,
        233,
        47,
        71,
        141,
        97,
        223,
        11,
        216,
        215,
        10,
        62,
        66,
        127,
        189,
        51,
        82,
        106,
        89,
        13,
        165,
        94,
        99,
        125,
        248,
        244,
        159,
        244,
        60,
        104,
        41,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static CONDUIT_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct Conduit<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for Conduit<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for Conduit<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for Conduit<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for Conduit<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(Conduit)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Conduit<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    CONDUIT_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                CONDUIT_ABI.clone(),
                CONDUIT_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `execute` (0x4ce34aa2) function
        pub fn execute(
            &self,
            transfers: ::std::vec::Vec<ConduitTransfer>,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 4]> {
            self.0
                .method_hash([76, 227, 74, 162], transfers)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `executeBatch1155` (0x8df25d92) function
        pub fn execute_batch_1155(
            &self,
            batch_transfers: ::std::vec::Vec<ConduitBatch1155Transfer>,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 4]> {
            self.0
                .method_hash([141, 242, 93, 146], batch_transfers)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `executeWithBatch1155` (0x899e104c) function
        pub fn execute_with_batch_1155(
            &self,
            standard_transfers: ::std::vec::Vec<ConduitTransfer>,
            batch_transfers: ::std::vec::Vec<ConduitBatch1155Transfer>,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 4]> {
            self.0
                .method_hash([137, 158, 16, 76], (standard_transfers, batch_transfers))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `updateChannel` (0xc4e8fcb5) function
        pub fn update_channel(
            &self,
            channel: ::ethers::core::types::Address,
            is_open: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([196, 232, 252, 181], (channel, is_open))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `ChannelUpdated` event
        pub fn channel_updated_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            ChannelUpdatedFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            ChannelUpdatedFilter,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for Conduit<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `BadReturnValueFromERC20OnTransfer` with signature `BadReturnValueFromERC20OnTransfer(address,address,address,uint256)` and selector `0x98891923`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "BadReturnValueFromERC20OnTransfer",
        abi = "BadReturnValueFromERC20OnTransfer(address,address,address,uint256)"
    )]
    pub struct BadReturnValueFromERC20OnTransfer {
        pub token: ::ethers::core::types::Address,
        pub from: ::ethers::core::types::Address,
        pub to: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    ///Custom Error type `ChannelClosed` with signature `ChannelClosed(address)` and selector `0x93daadf2`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "ChannelClosed", abi = "ChannelClosed(address)")]
    pub struct ChannelClosed {
        pub channel: ::ethers::core::types::Address,
    }
    ///Custom Error type `ChannelStatusAlreadySet` with signature `ChannelStatusAlreadySet(address,bool)` and selector `0x924e341e`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "ChannelStatusAlreadySet",
        abi = "ChannelStatusAlreadySet(address,bool)"
    )]
    pub struct ChannelStatusAlreadySet {
        pub channel: ::ethers::core::types::Address,
        pub is_open: bool,
    }
    ///Custom Error type `ERC1155BatchTransferGenericFailure` with signature `ERC1155BatchTransferGenericFailure(address,address,address,uint256[],uint256[])` and selector `0xafc445e2`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "ERC1155BatchTransferGenericFailure",
        abi = "ERC1155BatchTransferGenericFailure(address,address,address,uint256[],uint256[])"
    )]
    pub struct ERC1155BatchTransferGenericFailure {
        pub token: ::ethers::core::types::Address,
        pub from: ::ethers::core::types::Address,
        pub to: ::ethers::core::types::Address,
        pub identifiers: ::std::vec::Vec<::ethers::core::types::U256>,
        pub amounts: ::std::vec::Vec<::ethers::core::types::U256>,
    }
    ///Custom Error type `Invalid1155BatchTransferEncoding` with signature `Invalid1155BatchTransferEncoding()` and selector `0xeba2084c`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "Invalid1155BatchTransferEncoding",
        abi = "Invalid1155BatchTransferEncoding()"
    )]
    pub struct Invalid1155BatchTransferEncoding;
    ///Custom Error type `InvalidController` with signature `InvalidController()` and selector `0x6d5769be`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidController", abi = "InvalidController()")]
    pub struct InvalidController;
    ///Custom Error type `InvalidERC721TransferAmount` with signature `InvalidERC721TransferAmount()` and selector `0xefcc00b1`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "InvalidERC721TransferAmount",
        abi = "InvalidERC721TransferAmount()"
    )]
    pub struct InvalidERC721TransferAmount;
    ///Custom Error type `InvalidItemType` with signature `InvalidItemType()` and selector `0x7932f1fc`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidItemType", abi = "InvalidItemType()")]
    pub struct InvalidItemType;
    ///Custom Error type `MissingItemAmount` with signature `MissingItemAmount()` and selector `0x91b3e514`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "MissingItemAmount", abi = "MissingItemAmount()")]
    pub struct MissingItemAmount;
    ///Custom Error type `NoContract` with signature `NoContract(address)` and selector `0x5f15d672`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NoContract", abi = "NoContract(address)")]
    pub struct NoContract {
        pub account: ::ethers::core::types::Address,
    }
    ///Custom Error type `TokenTransferGenericFailure` with signature `TokenTransferGenericFailure(address,address,address,uint256,uint256)` and selector `0xf486bc87`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "TokenTransferGenericFailure",
        abi = "TokenTransferGenericFailure(address,address,address,uint256,uint256)"
    )]
    pub struct TokenTransferGenericFailure {
        pub token: ::ethers::core::types::Address,
        pub from: ::ethers::core::types::Address,
        pub to: ::ethers::core::types::Address,
        pub identifier: ::ethers::core::types::U256,
        pub amount: ::ethers::core::types::U256,
    }
    ///Custom Error type `UnusedItemParameters` with signature `UnusedItemParameters()` and selector `0x6ab37ce7`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "UnusedItemParameters", abi = "UnusedItemParameters()")]
    pub struct UnusedItemParameters;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum ConduitErrors {
        BadReturnValueFromERC20OnTransfer(BadReturnValueFromERC20OnTransfer),
        ChannelClosed(ChannelClosed),
        ChannelStatusAlreadySet(ChannelStatusAlreadySet),
        ERC1155BatchTransferGenericFailure(ERC1155BatchTransferGenericFailure),
        Invalid1155BatchTransferEncoding(Invalid1155BatchTransferEncoding),
        InvalidController(InvalidController),
        InvalidERC721TransferAmount(InvalidERC721TransferAmount),
        InvalidItemType(InvalidItemType),
        MissingItemAmount(MissingItemAmount),
        NoContract(NoContract),
        TokenTransferGenericFailure(TokenTransferGenericFailure),
        UnusedItemParameters(UnusedItemParameters),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for ConduitErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <BadReturnValueFromERC20OnTransfer as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::BadReturnValueFromERC20OnTransfer(decoded));
            }
            if let Ok(decoded)
                = <ChannelClosed as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::ChannelClosed(decoded));
            }
            if let Ok(decoded)
                = <ChannelStatusAlreadySet as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::ChannelStatusAlreadySet(decoded));
            }
            if let Ok(decoded)
                = <ERC1155BatchTransferGenericFailure as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::ERC1155BatchTransferGenericFailure(decoded));
            }
            if let Ok(decoded)
                = <Invalid1155BatchTransferEncoding as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::Invalid1155BatchTransferEncoding(decoded));
            }
            if let Ok(decoded)
                = <InvalidController as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::InvalidController(decoded));
            }
            if let Ok(decoded)
                = <InvalidERC721TransferAmount as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::InvalidERC721TransferAmount(decoded));
            }
            if let Ok(decoded)
                = <InvalidItemType as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::InvalidItemType(decoded));
            }
            if let Ok(decoded)
                = <MissingItemAmount as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::MissingItemAmount(decoded));
            }
            if let Ok(decoded)
                = <NoContract as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NoContract(decoded));
            }
            if let Ok(decoded)
                = <TokenTransferGenericFailure as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::TokenTransferGenericFailure(decoded));
            }
            if let Ok(decoded)
                = <UnusedItemParameters as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::UnusedItemParameters(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for ConduitErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::BadReturnValueFromERC20OnTransfer(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ChannelClosed(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ChannelStatusAlreadySet(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ERC1155BatchTransferGenericFailure(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Invalid1155BatchTransferEncoding(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InvalidController(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InvalidERC721TransferAmount(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InvalidItemType(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::MissingItemAmount(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NoContract(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::TokenTransferGenericFailure(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UnusedItemParameters(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for ConduitErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <BadReturnValueFromERC20OnTransfer as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <ChannelClosed as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <ChannelStatusAlreadySet as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <ERC1155BatchTransferGenericFailure as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <Invalid1155BatchTransferEncoding as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <InvalidController as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <InvalidERC721TransferAmount as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <InvalidItemType as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <MissingItemAmount as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <NoContract as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <TokenTransferGenericFailure as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <UnusedItemParameters as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for ConduitErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::BadReturnValueFromERC20OnTransfer(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ChannelClosed(element) => ::core::fmt::Display::fmt(element, f),
                Self::ChannelStatusAlreadySet(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ERC1155BatchTransferGenericFailure(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Invalid1155BatchTransferEncoding(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::InvalidController(element) => ::core::fmt::Display::fmt(element, f),
                Self::InvalidERC721TransferAmount(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::InvalidItemType(element) => ::core::fmt::Display::fmt(element, f),
                Self::MissingItemAmount(element) => ::core::fmt::Display::fmt(element, f),
                Self::NoContract(element) => ::core::fmt::Display::fmt(element, f),
                Self::TokenTransferGenericFailure(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::UnusedItemParameters(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for ConduitErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<BadReturnValueFromERC20OnTransfer> for ConduitErrors {
        fn from(value: BadReturnValueFromERC20OnTransfer) -> Self {
            Self::BadReturnValueFromERC20OnTransfer(value)
        }
    }
    impl ::core::convert::From<ChannelClosed> for ConduitErrors {
        fn from(value: ChannelClosed) -> Self {
            Self::ChannelClosed(value)
        }
    }
    impl ::core::convert::From<ChannelStatusAlreadySet> for ConduitErrors {
        fn from(value: ChannelStatusAlreadySet) -> Self {
            Self::ChannelStatusAlreadySet(value)
        }
    }
    impl ::core::convert::From<ERC1155BatchTransferGenericFailure> for ConduitErrors {
        fn from(value: ERC1155BatchTransferGenericFailure) -> Self {
            Self::ERC1155BatchTransferGenericFailure(value)
        }
    }
    impl ::core::convert::From<Invalid1155BatchTransferEncoding> for ConduitErrors {
        fn from(value: Invalid1155BatchTransferEncoding) -> Self {
            Self::Invalid1155BatchTransferEncoding(value)
        }
    }
    impl ::core::convert::From<InvalidController> for ConduitErrors {
        fn from(value: InvalidController) -> Self {
            Self::InvalidController(value)
        }
    }
    impl ::core::convert::From<InvalidERC721TransferAmount> for ConduitErrors {
        fn from(value: InvalidERC721TransferAmount) -> Self {
            Self::InvalidERC721TransferAmount(value)
        }
    }
    impl ::core::convert::From<InvalidItemType> for ConduitErrors {
        fn from(value: InvalidItemType) -> Self {
            Self::InvalidItemType(value)
        }
    }
    impl ::core::convert::From<MissingItemAmount> for ConduitErrors {
        fn from(value: MissingItemAmount) -> Self {
            Self::MissingItemAmount(value)
        }
    }
    impl ::core::convert::From<NoContract> for ConduitErrors {
        fn from(value: NoContract) -> Self {
            Self::NoContract(value)
        }
    }
    impl ::core::convert::From<TokenTransferGenericFailure> for ConduitErrors {
        fn from(value: TokenTransferGenericFailure) -> Self {
            Self::TokenTransferGenericFailure(value)
        }
    }
    impl ::core::convert::From<UnusedItemParameters> for ConduitErrors {
        fn from(value: UnusedItemParameters) -> Self {
            Self::UnusedItemParameters(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "ChannelUpdated", abi = "ChannelUpdated(address,bool)")]
    pub struct ChannelUpdatedFilter {
        #[ethevent(indexed)]
        pub channel: ::ethers::core::types::Address,
        pub open: bool,
    }
    ///Container type for all input parameters for the `execute` function with signature `execute((uint8,address,address,address,uint256,uint256)[])` and selector `0x4ce34aa2`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "execute",
        abi = "execute((uint8,address,address,address,uint256,uint256)[])"
    )]
    pub struct ExecuteCall {
        pub transfers: ::std::vec::Vec<ConduitTransfer>,
    }
    ///Container type for all input parameters for the `executeBatch1155` function with signature `executeBatch1155((address,address,address,uint256[],uint256[])[])` and selector `0x8df25d92`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "executeBatch1155",
        abi = "executeBatch1155((address,address,address,uint256[],uint256[])[])"
    )]
    pub struct ExecuteBatch1155Call {
        pub batch_transfers: ::std::vec::Vec<ConduitBatch1155Transfer>,
    }
    ///Container type for all input parameters for the `executeWithBatch1155` function with signature `executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])` and selector `0x899e104c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "executeWithBatch1155",
        abi = "executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])"
    )]
    pub struct ExecuteWithBatch1155Call {
        pub standard_transfers: ::std::vec::Vec<ConduitTransfer>,
        pub batch_transfers: ::std::vec::Vec<ConduitBatch1155Transfer>,
    }
    ///Container type for all input parameters for the `updateChannel` function with signature `updateChannel(address,bool)` and selector `0xc4e8fcb5`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "updateChannel", abi = "updateChannel(address,bool)")]
    pub struct UpdateChannelCall {
        pub channel: ::ethers::core::types::Address,
        pub is_open: bool,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum ConduitCalls {
        Execute(ExecuteCall),
        ExecuteBatch1155(ExecuteBatch1155Call),
        ExecuteWithBatch1155(ExecuteWithBatch1155Call),
        UpdateChannel(UpdateChannelCall),
    }
    impl ::ethers::core::abi::AbiDecode for ConduitCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <ExecuteCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Execute(decoded));
            }
            if let Ok(decoded)
                = <ExecuteBatch1155Call as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::ExecuteBatch1155(decoded));
            }
            if let Ok(decoded)
                = <ExecuteWithBatch1155Call as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::ExecuteWithBatch1155(decoded));
            }
            if let Ok(decoded)
                = <UpdateChannelCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::UpdateChannel(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for ConduitCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Execute(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::ExecuteBatch1155(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ExecuteWithBatch1155(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UpdateChannel(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for ConduitCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Execute(element) => ::core::fmt::Display::fmt(element, f),
                Self::ExecuteBatch1155(element) => ::core::fmt::Display::fmt(element, f),
                Self::ExecuteWithBatch1155(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::UpdateChannel(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<ExecuteCall> for ConduitCalls {
        fn from(value: ExecuteCall) -> Self {
            Self::Execute(value)
        }
    }
    impl ::core::convert::From<ExecuteBatch1155Call> for ConduitCalls {
        fn from(value: ExecuteBatch1155Call) -> Self {
            Self::ExecuteBatch1155(value)
        }
    }
    impl ::core::convert::From<ExecuteWithBatch1155Call> for ConduitCalls {
        fn from(value: ExecuteWithBatch1155Call) -> Self {
            Self::ExecuteWithBatch1155(value)
        }
    }
    impl ::core::convert::From<UpdateChannelCall> for ConduitCalls {
        fn from(value: UpdateChannelCall) -> Self {
            Self::UpdateChannel(value)
        }
    }
    ///Container type for all return fields from the `execute` function with signature `execute((uint8,address,address,address,uint256,uint256)[])` and selector `0x4ce34aa2`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ExecuteReturn {
        pub magic_value: [u8; 4],
    }
    ///Container type for all return fields from the `executeBatch1155` function with signature `executeBatch1155((address,address,address,uint256[],uint256[])[])` and selector `0x8df25d92`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ExecuteBatch1155Return {
        pub magic_value: [u8; 4],
    }
    ///Container type for all return fields from the `executeWithBatch1155` function with signature `executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])` and selector `0x899e104c`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ExecuteWithBatch1155Return {
        pub magic_value: [u8; 4],
    }
}
