pub use erc1155_holder::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod erc1155_holder {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static ERC1155HOLDER_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        3,
        197,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        1,
        255,
        201,
        167,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        188,
        25,
        124,
        129,
        20,
        97,
        0,
        110,
        87,
        128,
        99,
        242,
        58,
        110,
        97,
        20,
        97,
        0,
        166,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        89,
        97,
        0,
        84,
        54,
        96,
        4,
        97,
        0,
        252,
        86,
        91,
        97,
        0,
        197,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        141,
        97,
        0,
        124,
        54,
        96,
        4,
        97,
        2,
        128,
        86,
        91,
        99,
        188,
        25,
        124,
        129,
        96,
        224,
        27,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        101,
        86,
        91,
        97,
        0,
        141,
        97,
        0,
        180,
        54,
        96,
        4,
        97,
        3,
        42,
        86,
        91,
        99,
        242,
        58,
        110,
        97,
        96,
        224,
        27,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        130,
        22,
        99,
        2,
        113,
        24,
        151,
        96,
        229,
        27,
        20,
        128,
        97,
        0,
        246,
        87,
        80,
        99,
        1,
        255,
        201,
        167,
        96,
        224,
        27,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        131,
        22,
        20,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        1,
        14,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        129,
        22,
        129,
        20,
        97,
        1,
        38,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        1,
        68,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        22,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        1,
        136,
        87,
        97,
        1,
        136,
        97,
        1,
        73,
        86,
        91,
        96,
        64,
        82,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        97,
        1,
        161,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        32,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        1,
        189,
        87,
        97,
        1,
        189,
        97,
        1,
        73,
        86,
        91,
        129,
        96,
        5,
        27,
        97,
        1,
        204,
        130,
        130,
        1,
        97,
        1,
        95,
        86,
        91,
        146,
        131,
        82,
        132,
        129,
        1,
        130,
        1,
        146,
        130,
        129,
        1,
        144,
        135,
        133,
        17,
        21,
        97,
        1,
        230,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        135,
        1,
        146,
        80,
        91,
        132,
        131,
        16,
        21,
        97,
        2,
        5,
        87,
        130,
        53,
        130,
        82,
        145,
        131,
        1,
        145,
        144,
        131,
        1,
        144,
        97,
        1,
        236,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        97,
        2,
        33,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        2,
        59,
        87,
        97,
        2,
        59,
        97,
        1,
        73,
        86,
        91,
        97,
        2,
        78,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        22,
        96,
        32,
        1,
        97,
        1,
        95,
        86,
        91,
        129,
        129,
        82,
        132,
        96,
        32,
        131,
        134,
        1,
        1,
        17,
        21,
        97,
        2,
        99,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        96,
        32,
        133,
        1,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        145,
        129,
        1,
        96,
        32,
        1,
        145,
        144,
        145,
        82,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        160,
        134,
        136,
        3,
        18,
        21,
        97,
        2,
        152,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        161,
        134,
        97,
        1,
        45,
        86,
        91,
        148,
        80,
        97,
        2,
        175,
        96,
        32,
        135,
        1,
        97,
        1,
        45,
        86,
        91,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        2,
        204,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        216,
        137,
        131,
        138,
        1,
        97,
        1,
        144,
        86,
        91,
        148,
        80,
        96,
        96,
        136,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        2,
        238,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        250,
        137,
        131,
        138,
        1,
        97,
        1,
        144,
        86,
        91,
        147,
        80,
        96,
        128,
        136,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        3,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        3,
        29,
        136,
        130,
        137,
        1,
        97,
        2,
        16,
        86,
        91,
        145,
        80,
        80,
        146,
        149,
        80,
        146,
        149,
        144,
        147,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        160,
        134,
        136,
        3,
        18,
        21,
        97,
        3,
        66,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        3,
        75,
        134,
        97,
        1,
        45,
        86,
        91,
        148,
        80,
        97,
        3,
        89,
        96,
        32,
        135,
        1,
        97,
        1,
        45,
        86,
        91,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        146,
        80,
        96,
        96,
        134,
        1,
        53,
        145,
        80,
        96,
        128,
        134,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        3,
        131,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        3,
        29,
        136,
        130,
        137,
        1,
        97,
        2,
        16,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        116,
        203,
        154,
        192,
        118,
        69,
        15,
        107,
        170,
        132,
        57,
        169,
        40,
        219,
        253,
        243,
        206,
        55,
        66,
        80,
        140,
        111,
        201,
        92,
        222,
        56,
        193,
        52,
        123,
        68,
        156,
        39,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static ERC1155HOLDER_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        1,
        255,
        201,
        167,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        188,
        25,
        124,
        129,
        20,
        97,
        0,
        110,
        87,
        128,
        99,
        242,
        58,
        110,
        97,
        20,
        97,
        0,
        166,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        89,
        97,
        0,
        84,
        54,
        96,
        4,
        97,
        0,
        252,
        86,
        91,
        97,
        0,
        197,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        141,
        97,
        0,
        124,
        54,
        96,
        4,
        97,
        2,
        128,
        86,
        91,
        99,
        188,
        25,
        124,
        129,
        96,
        224,
        27,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        101,
        86,
        91,
        97,
        0,
        141,
        97,
        0,
        180,
        54,
        96,
        4,
        97,
        3,
        42,
        86,
        91,
        99,
        242,
        58,
        110,
        97,
        96,
        224,
        27,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        130,
        22,
        99,
        2,
        113,
        24,
        151,
        96,
        229,
        27,
        20,
        128,
        97,
        0,
        246,
        87,
        80,
        99,
        1,
        255,
        201,
        167,
        96,
        224,
        27,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        131,
        22,
        20,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        1,
        14,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        129,
        22,
        129,
        20,
        97,
        1,
        38,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        1,
        68,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        22,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        1,
        136,
        87,
        97,
        1,
        136,
        97,
        1,
        73,
        86,
        91,
        96,
        64,
        82,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        97,
        1,
        161,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        32,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        1,
        189,
        87,
        97,
        1,
        189,
        97,
        1,
        73,
        86,
        91,
        129,
        96,
        5,
        27,
        97,
        1,
        204,
        130,
        130,
        1,
        97,
        1,
        95,
        86,
        91,
        146,
        131,
        82,
        132,
        129,
        1,
        130,
        1,
        146,
        130,
        129,
        1,
        144,
        135,
        133,
        17,
        21,
        97,
        1,
        230,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        135,
        1,
        146,
        80,
        91,
        132,
        131,
        16,
        21,
        97,
        2,
        5,
        87,
        130,
        53,
        130,
        82,
        145,
        131,
        1,
        145,
        144,
        131,
        1,
        144,
        97,
        1,
        236,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        97,
        2,
        33,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        2,
        59,
        87,
        97,
        2,
        59,
        97,
        1,
        73,
        86,
        91,
        97,
        2,
        78,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        22,
        96,
        32,
        1,
        97,
        1,
        95,
        86,
        91,
        129,
        129,
        82,
        132,
        96,
        32,
        131,
        134,
        1,
        1,
        17,
        21,
        97,
        2,
        99,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        96,
        32,
        133,
        1,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        145,
        129,
        1,
        96,
        32,
        1,
        145,
        144,
        145,
        82,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        160,
        134,
        136,
        3,
        18,
        21,
        97,
        2,
        152,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        161,
        134,
        97,
        1,
        45,
        86,
        91,
        148,
        80,
        97,
        2,
        175,
        96,
        32,
        135,
        1,
        97,
        1,
        45,
        86,
        91,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        2,
        204,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        216,
        137,
        131,
        138,
        1,
        97,
        1,
        144,
        86,
        91,
        148,
        80,
        96,
        96,
        136,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        2,
        238,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        250,
        137,
        131,
        138,
        1,
        97,
        1,
        144,
        86,
        91,
        147,
        80,
        96,
        128,
        136,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        3,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        3,
        29,
        136,
        130,
        137,
        1,
        97,
        2,
        16,
        86,
        91,
        145,
        80,
        80,
        146,
        149,
        80,
        146,
        149,
        144,
        147,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        160,
        134,
        136,
        3,
        18,
        21,
        97,
        3,
        66,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        3,
        75,
        134,
        97,
        1,
        45,
        86,
        91,
        148,
        80,
        97,
        3,
        89,
        96,
        32,
        135,
        1,
        97,
        1,
        45,
        86,
        91,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        146,
        80,
        96,
        96,
        134,
        1,
        53,
        145,
        80,
        96,
        128,
        134,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        3,
        131,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        3,
        29,
        136,
        130,
        137,
        1,
        97,
        2,
        16,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        116,
        203,
        154,
        192,
        118,
        69,
        15,
        107,
        170,
        132,
        57,
        169,
        40,
        219,
        253,
        243,
        206,
        55,
        66,
        80,
        140,
        111,
        201,
        92,
        222,
        56,
        193,
        52,
        123,
        68,
        156,
        39,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static ERC1155HOLDER_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct ERC1155Holder<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for ERC1155Holder<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for ERC1155Holder<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for ERC1155Holder<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for ERC1155Holder<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(ERC1155Holder)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> ERC1155Holder<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    ERC1155HOLDER_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                ERC1155HOLDER_ABI.clone(),
                ERC1155HOLDER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `onERC1155BatchReceived` (0xbc197c81) function
        pub fn on_erc1155_batch_received(
            &self,
            p0: ::ethers::core::types::Address,
            p1: ::ethers::core::types::Address,
            p2: ::std::vec::Vec<::ethers::core::types::U256>,
            p3: ::std::vec::Vec<::ethers::core::types::U256>,
            p4: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 4]> {
            self.0
                .method_hash([188, 25, 124, 129], (p0, p1, p2, p3, p4))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `onERC1155Received` (0xf23a6e61) function
        pub fn on_erc1155_received(
            &self,
            p0: ::ethers::core::types::Address,
            p1: ::ethers::core::types::Address,
            p2: ::ethers::core::types::U256,
            p3: ::ethers::core::types::U256,
            p4: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 4]> {
            self.0
                .method_hash([242, 58, 110, 97], (p0, p1, p2, p3, p4))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `supportsInterface` (0x01ffc9a7) function
        pub fn supports_interface(
            &self,
            interface_id: [u8; 4],
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([1, 255, 201, 167], interface_id)
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for ERC1155Holder<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `onERC1155BatchReceived` function with signature `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)` and selector `0xbc197c81`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "onERC1155BatchReceived",
        abi = "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
    )]
    pub struct OnERC1155BatchReceivedCall(
        pub ::ethers::core::types::Address,
        pub ::ethers::core::types::Address,
        pub ::std::vec::Vec<::ethers::core::types::U256>,
        pub ::std::vec::Vec<::ethers::core::types::U256>,
        pub ::ethers::core::types::Bytes,
    );
    ///Container type for all input parameters for the `onERC1155Received` function with signature `onERC1155Received(address,address,uint256,uint256,bytes)` and selector `0xf23a6e61`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "onERC1155Received",
        abi = "onERC1155Received(address,address,uint256,uint256,bytes)"
    )]
    pub struct OnERC1155ReceivedCall(
        pub ::ethers::core::types::Address,
        pub ::ethers::core::types::Address,
        pub ::ethers::core::types::U256,
        pub ::ethers::core::types::U256,
        pub ::ethers::core::types::Bytes,
    );
    ///Container type for all input parameters for the `supportsInterface` function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "supportsInterface", abi = "supportsInterface(bytes4)")]
    pub struct SupportsInterfaceCall {
        pub interface_id: [u8; 4],
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum ERC1155HolderCalls {
        OnERC1155BatchReceived(OnERC1155BatchReceivedCall),
        OnERC1155Received(OnERC1155ReceivedCall),
        SupportsInterface(SupportsInterfaceCall),
    }
    impl ::ethers::core::abi::AbiDecode for ERC1155HolderCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <OnERC1155BatchReceivedCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::OnERC1155BatchReceived(decoded));
            }
            if let Ok(decoded)
                = <OnERC1155ReceivedCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::OnERC1155Received(decoded));
            }
            if let Ok(decoded)
                = <SupportsInterfaceCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::SupportsInterface(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for ERC1155HolderCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::OnERC1155BatchReceived(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::OnERC1155Received(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SupportsInterface(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for ERC1155HolderCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::OnERC1155BatchReceived(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::OnERC1155Received(element) => ::core::fmt::Display::fmt(element, f),
                Self::SupportsInterface(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<OnERC1155BatchReceivedCall> for ERC1155HolderCalls {
        fn from(value: OnERC1155BatchReceivedCall) -> Self {
            Self::OnERC1155BatchReceived(value)
        }
    }
    impl ::core::convert::From<OnERC1155ReceivedCall> for ERC1155HolderCalls {
        fn from(value: OnERC1155ReceivedCall) -> Self {
            Self::OnERC1155Received(value)
        }
    }
    impl ::core::convert::From<SupportsInterfaceCall> for ERC1155HolderCalls {
        fn from(value: SupportsInterfaceCall) -> Self {
            Self::SupportsInterface(value)
        }
    }
    ///Container type for all return fields from the `onERC1155BatchReceived` function with signature `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)` and selector `0xbc197c81`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OnERC1155BatchReceivedReturn(pub [u8; 4]);
    ///Container type for all return fields from the `onERC1155Received` function with signature `onERC1155Received(address,address,uint256,uint256,bytes)` and selector `0xf23a6e61`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OnERC1155ReceivedReturn(pub [u8; 4]);
    ///Container type for all return fields from the `supportsInterface` function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct SupportsInterfaceReturn(pub bool);
}
